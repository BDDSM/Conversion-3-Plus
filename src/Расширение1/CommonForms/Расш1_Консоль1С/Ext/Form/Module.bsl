// Встроить нужно:
// Алгоритмы.

// Настройки конвертации:
//1. Перед конвертацией
//2. Перед отложенным заполнением
//3. После конвертации

// ПОД
//1. При обработке
//2. Выборка данных

// ПКО Отправка
//1. При отправке

// ПКО Получение
//1. При конвертации данных XDTO
//2. Перед записью полученных данных

#Область ОписаниеПеременных
// Не обязательная область
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВерсияОбработки = "20200807"; // Написть ишью что бы версию возвращала компонента.
	
	Макет = ПолучитьОбщийМакет("bsl_console");
	АдресМакета = ПоместитьВоВременноеХранилище(Макет, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПометкуТемы("СветлаяТема");
	УправлениеВозможностьюРедактирования();
	ИзвлечьИсходники();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеHTMLДокументСформирован(Элемент)
	
	Если ИсходникиЗагружены Тогда
		
		ДокументЗагружен = Истина;
		ИнициализацияРедактора();
		АктивироватьДополнительныеФункции();
		
	КонецЕсли;
	
КонецПроцедуры

//&НаКлиенте
//Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
//	
//	Если НЕ ТолькоПросмотр Тогда
//	
//		Событие = ДанныеСобытия.Event.eventData1C;
//		
//		Если Событие <> Неопределено Тогда
//					
//			Если Событие.event = "EVENT_QUERY_CONSTRUCT" Тогда
//				ВызватьКонструкторЗапроса(Событие.params);
//			ИначеЕсли Событие.event = "EVENT_FORMAT_CONSTRUCT" Тогда
//				ВызватьКонструкторФорматнойСтроки(Событие.params);
//			КонецЕсли;
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы
// Код процедур и функций
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьПометкуТемы(Тема)
	
	Для Каждого Элемент ИЗ Элементы.Тема.ПодчиненныеЭлементы Цикл
		Элемент.Пометка = (Элемент.Имя = Тема);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВозможностьюРедактирования()
	
	//Элементы.ТолькоПросмотр.Пометка = НЕ ТолькоПросмотр;
	
	ДоступностьКнопок = НЕ ТолькоПросмотр И ДокументЗагружен;
	//Элементы.КонструкторЗапроса.Доступность = ДоступностьКнопок;
	//Элементы.ЗаменитьВхождения.Доступность = ДоступностьКнопок;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходники()
	
	Состояние("Инициализация...");
	НачатьПолучениеКаталогаВременныхФайлов(Новый ОписаниеОповещения("ПриПолученииКаталогаВременныхФайлов", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииКаталогаВременныхФайлов(ИмяКаталога, ДопПараметры) Экспорт
	
	КаталогИсходников = ИмяКаталога + "bsl_console\";
	НачатьСозданиеКаталога(Новый ОписаниеОповещения("ПослеСозданияКаталога", ЭтаФорма), КаталогИсходников);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияКаталога(ИмяКаталога, ДопПараметры) Экспорт
	
	ФайлНаДиске = Новый Файл(КаталогИсходников);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПослеПроверкиСуществованияКаталога", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияКаталога(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		ФайлНаДиске = Новый Файл(КаталогИсходников + ВерсияОбработки + ".ver");
		ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПослеПроверкиСуществованияФайлаВерсии", ЭтаФорма));
	Иначе
		ВывестиОшибку("Не удалось создать каталог для исходников", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияФайлаВерсии(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		ФайлНаДиске = Новый Файл(КаталогИсходников + "index.html");
		ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПослеПроверкиСуществованияИндексногоФайла", ЭтаФорма));
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиСуществованияИндексногоФайла(Существует, ДопПараметры) Экспорт
	
	Если Существует Тогда
		ИндексныйФайл = ИндексныйФайл();
		ТочкаВхода = КаталогИсходников + "index.html";
		НачатьКопированиеФайла(Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтаФорма), ТочкаВхода, ИндексныйФайл);
	Иначе
		ИзвлечьИсходникиНаКлиенте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеКопированияИндексногоФайла(СкопированныйФайл, ДопПараметры) Экспорт
	
	HTML = СкопированныйФайл;
	ИсходникиЗагружены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияРедактора()
	
	Инфо = Новый СистемнаяИнформация();
	View().init(Инфо.ВерсияПриложения);
	
КонецПроцедуры

&НаКлиенте
Функция View()
	// Если вьюха только на клиенте используется, переделать на переменную клиентскую.
	Возврат Элементы.ПолеHTML.Документ.defaultView;
	
КонецФункции

&НаКлиенте
Процедура АктивироватьДополнительныеФункции()
	
	//Элементы.КонструкторЗапроса.Доступность = Истина;
	//Элементы.ЗагрузитьИзФайла.Доступность = Истина;
	//Элементы.СохранитьВФайл.Доступность = Истина;
	//Элементы.ЗаменитьВхождения.Доступность = Истина;
	//Элементы.ТолькоПросмотр.Доступность = Истина;
	//Элементы.БыстрыеПодсказки.Доступность = Истина;
	//Элементы.ПодсвечиватьЗапросы.Доступность = Истина;
	//Элементы.КартаКода.Доступность = Истина;
	//Элементы.Примеры.Доступность = Истина;
	//Элементы.Тема.Доступность = Истина;
	//Элементы.ВыполнитьНаКлиенте.Доступность = Истина;
	//Элементы.ВыполнитьНаСервере.Доступность = Истина;
	
	//УправлениеБыстрымиПодсказками();
	//УправлениеВидимостьюКартыКода();
	
КонецПроцедуры

//&НаСервере
//Функция СкопироватьОбработкуНаСервер(АдресОбработки)

//	ФайлОбработки = ПолучитьИмяВременногоФайла();
//	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресОбработки);
//	ДвоичныеДанные.Записать(ФайлОбработки);
//	
//	Возврат ФайлОбработки;
//	
//КонецФункции


//&НаКлиенте
//Процедура НачатьПолучениеМетаданных(ПутьКОбработкеНаСервере)
//	
//	ДлительнаяОперация = НачатьПолучениеМетаданныхНаСервере(ПутьКОбработкеНаСервере);
//	
//	Модуль = ОбщийМодульКлиент("ДлительныеОперацииКлиент");
//	
//	ПараметрыОжидания = Модуль.ПараметрыОжидания(ЭтотОбъект);
//	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
//	
//	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверкаПолученияМетаданных", ЭтотОбъект);
//	Модуль.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
//	
//КонецПроцедуры

//&НаКлиенте
//Процедура ПроверкаПолученияМетаданных(Результат, ДопПараметры) Экспорт
//	
//	Если ТипЗнч(Результат) = Тип("Структура") Тогда
//	
//		Если Результат.Статус = "Выполнено" Тогда
//			
//			АдресМетаданных = Результат.АдресРезультата;
//			
//			Если ДокументЗагружен Тогда
//				ОбновитьМетаданные();
//			Иначе
//				ПодключитьОбработчикОжидания("ПроверкаЗагрузкиДокумента", 1, Ложь);
//			КонецЕсли;
//			
//		ИначеЕсли Результат.Статус = "Ошибка" Тогда
//			
//			ВывестиОшибку("Не удалось получить метаданные конфигурации:" + Символы.ПС + Результат.КраткоеПредставлениеОшибки + Символы.ПС + "Подсказка по метаданным будет недоступна.", Ложь);
//			
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервере
//Функция НачатьПолучениеМетаданныхНаСервере(ПутьКОбработкеНаСервере)
//	
//	ПараметрыЗадания = Новый Структура;
//	ПараметрыЗадания.Вставить("ИмяОбработки"		, ПутьКОбработкеНаСервере);
//	ПараметрыЗадания.Вставить("ИмяМетода"			, "ЗаполнитьКоллекциюМетаданных");
//	ПараметрыЗадания.Вставить("ПараметрыВыполнения"	, Неопределено);
//	ПараметрыЗадания.Вставить("ЭтоВнешняяОбработка"	, Истина);
//	
//	Модуль = ОбщийМодульСервер("ДлительныеОперации");
//	
//	ПараметрыВыполнения = Модуль.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
//	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение метаданных конфигуркции'");
//	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
//	ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор);
//	
//	ВыполняемыйМетод = "ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки";
//	
//	Возврат Модуль.ВыполнитьВФоне(ВыполняемыйМетод, ПараметрыЗадания, ПараметрыВыполнения);
//	
//КонецФункции

//&НаКлиенте
//Процедура ПроверкаЗагрузкиДокумента() Экспорт
//	
//	Если ДокументЗагружен Тогда
//		ОтключитьОбработчикОжидания("ПроверкаЗагрузкиДокумента");
//		ОбновитьМетаданные();
//	КонецЕсли;
//	
//КонецПроцедуры

//&НаСервереБезКонтекста
//Функция ОбщийМодульСервер(Имя) Экспорт
//	
//	Возврат Вычислить(Имя);
//	
//КонецФункции

&НаКлиенте
Процедура ВывестиОшибку(Текст, ЗакрыватьКонсоль)
	
	ПоказатьПредупреждение(Новый ОписаниеОповещения("ПослеВыводаОшибки", ЭтаФорма, Новый Структура("ЗакрыватьКонсоль", ЗакрыватьКонсоль)), Текст);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыводаОшибки(ДопПараметры) Экспорт
	
	Если ДопПараметры.ЗакрыватьКонсоль Тогда
		ЗакрытьКонсоль();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзвлечьИсходникиНаКлиенте()
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("ПослеУдаленияВременныхФайлов", ЭтаФорма), КаталогИсходников, "*.*");
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияВременныхФайлов(ДопПараметры) Экспорт
	
	ИмяФайла = КаталогИсходников + "bsl_console.zip";
	ДанныеМакета = ПолучитьИзВременногоХранилища(АдресМакета);
	ДанныеМакета.НачатьЗапись(Новый ОписаниеОповещения("ПослеЗаписиФайлаМакета", ЭтаФорма), ИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Функция ИндексныйФайл()
	
	Возврат КаталогИсходников + Формат(ТекущаяУниверсальнаяДатаВМиллисекундах(), "ЧГ=0") + ".html";

КонецФункции

//&НаКлиенте
//Функция ОбщийМодульКлиент(Имя) Экспорт
//	
//	Возврат Вычислить(Имя);
//	
//КонецФункции

//&НаКлиенте
//Процедура ОбновитьМетаданные()
//	
//	Состояние("Обновление метаданных...");
//	
//	КоллекцияМетаданных = ПолучитьИзВременногоХранилища(АдресМетаданных);
//	
//	Если КоллекцияМетаданных <> Неопределено Тогда
//		
//		Результат = View().updateMetadata(КоллекцияМетаданных);
//		
//		Если ТипЗнч(Результат) <> Тип("Булево") Тогда
//			ВывестиОшибку("Не удалось обновить метаданные: " + Символы.ПС + Результат.errorDescription, Ложь);
//		КонецЕсли;
//		
//	Иначе
//		
//		ВывестиОшибку("Не удалось получить метаданные", Ложь);
//		
//	КонецЕсли;
//	
//КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьКонсоль()
	
	Если ЗначениеЗаполнено(ИндексныйФайл) Тогда
		НачатьУдалениеФайлов(Новый ОписаниеОповещения("ПослеУдаленияИндексногоФайла", ЭтаФорма), ИндексныйФайл);
	Иначе
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУдаленияИндексногоФайла(ДопПараметры) Экспорт
	
	ИндексныйФайл = "";
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписиФайлаМакета(ДопПараметры) Экспорт
	
	Попытка
		Файл = Новый ЧтениеZipФайла(КаталогИсходников + "bsl_console.zip");
		Файл.ИзвлечьВсе(КаталогИсходников);
		Файл = Новый ЗаписьТекста(КаталогИсходников + ВерсияОбработки + ".ver");
		Файл.ЗаписатьСтроку(ТекущаяДата());
		Файл.Закрыть();
		ТочкаВхода = КаталогИсходников + "index.html";
		ИндексныйФайл = ИндексныйФайл();
		НачатьКопированиеФайла(Новый ОписаниеОповещения("ПослеКопированияИндексногоФайла", ЭтаФорма), ТочкаВхода, ИндексныйФайл);
	Исключение
		ВывестиОшибку("Не удалось извлечь исходники" + Символы.ПС + ОписаниеОшибки(), Истина);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Команда1(Команда)
	Переменка = View().getText();
КонецПроцедуры


#КонецОбласти
